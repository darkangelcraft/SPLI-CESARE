# coding=utf-8
import os
import glob
import re

#variabile globale che mi serve per identificare il libro scelto da cifrare
file_choosen = -1
#cosi non mi stampa anche STORY_CIPHER e STORY_CLEAR
books = glob.glob("*_.txt")

print '\nchoose:'

int_option = None
while int_option is None:

    print '0) dizionario'
    print '1) scegli file'
    print '2) cifra'
    print '3) decifra'
    print '4) invia'
    print '5) ricevi'
    print '6) attacco bruteforce'

    try:
        option1 = raw_input()
    except SyntaxError:
        option = None

    if option1 == '0':
        #per adesso l ho creato solo su un racconto, ho sonno ci guardo domani

        file = open(books[0], "r+")
        # bisogna togliere la punteggiature [".", ";", ":", "!", "?", "/", "\\", ",", "#", "@", "$", "&", ")", "(", "\""]
        story = file.read().lower().replace("."," ").replace("'"," ").replace(";"," ").replace(":"," ").replace("!"," ").replace("?"," ").replace("/"," ").replace("'\'"," ").replace(','," ").replace("#"," ").replace("@"," ").replace("$"," ").replace("&"," ").replace(")"," ").replace('"'," ").replace("-"," ").replace("Â°"," ").replace("("," ").split()

        array_without_occurence=""
        for word in story:
            if not array_without_occurence.__contains__(word):
                array_without_occurence=array_without_occurence+word+'\n'

        # scrivo e creo file cifrato
        file = open("dictionary.txt", "a")
        file.write(array_without_occurence)

        print "dictionary created!\n\n"

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    #stampo i file da selezionare1
    elif option1 == '1':
        i=0
        for num in books:
            print '\t'+str(i)+') '+books[i]
            i=i+1

        try:
            file_choosen = raw_input()
        except SyntaxError:
            option = None

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    #cifra
    elif option1 == '2':
        print 'the book choosen is: '+books[int(file_choosen)]

        #aggiusto prima il file eliminando maiuscole al suo interno
        file = open(books[int(file_choosen)], "r+")
        story = file.read().lower()

        print 'insert OFFSET: (+2) (-2)'
        offset = raw_input()

        story_cipher = ""

        #ora scorro carattere per carattere e applico l offset alle lettere
        for c in story:
            #restituisce True se e un carattere ABCabc
            if c.isalpha():
                #ord('a') -> 97
                #chr(97 + 3) -> chr(100) -> 'd'

                #numero corrispondente in ASCII
                character = str(c)
                #print character
                old = ord(character)
                #print int(old)
                #numero shiftato destra o sinistra
                if offset.__contains__('+'):
                    new = int(old) + int(offset[1:])
                    if new > 122:
                        new = new - 26
                else:
                    new = int(old) - int(offset[1:])
                    if new < 97:
                        new = new + 26

                story_cipher = story_cipher + chr(new)
                #print chr(new)
            else:
                character = str(c)
                story_cipher=story_cipher+character

        #print story_cipher

        #scrivo e creo file cifrato
        file = open("STORY_CIPHER.txt", "w")
        file.write(story_cipher)

        print "story_cipher created!\n\n"

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    elif option1 == '3':
        print 'the book to decipher is: ' + books[int(file_choosen)]

        # aggiusto prima il file eliminando maiuscole al suo interno
        file = open("STORY_CIPHER.txt", "r+")
        story = file.read()

        print 'insert OFFSET known:'
        offset = raw_input()

        story_clear = ""

        # inizio decifrazione avendo noto l'offset
        for c in story:
            # restituisce True se e un carattere ABCabc
            if c.isalpha():
                # ord('a') -> 97
                # chr(97 + 3) -> chr(100) -> 'd'

                # numero corrispondente in ASCII
                character = str(c)
                # print character
                old = ord(character)
                # print int(old)
                # numero shiftato destra o sinistra
                if offset.__contains__('+'):
                    new = int(old) + int(offset[1:])
                    if new > 122:
                        new = new - 26
                else:
                    new = int(old) - int(offset[1:])
                    if new < 97:
                        new = new + 26

                story_clear = story_clear + chr(new)
                # print chr(new)
            else:
                character = str(c)
                story_clear = story_clear + character

        # print story_clear

        # scrivo e creo file cifrato
        file = open("STORY_CLEAR.txt", "w")
        file.write(story_clear)

        print "story_clear created!\n\n"

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    elif option1 == '4':
        print 'waiting...'
        os.system('sudo nc -l -p 3333 | pv -rb > '+books[int(file_choosen)])

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    elif option1 == '5':
        print 'sending with netcat'
        print "insert ip target:"
        ip = raw_input()
        os.system('sudo pv ' + books[int(file_choosen)] + ' | nc -w 1 ' + ip + ' 3333')

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    elif option1 == '6':
        print 'waiting...'
        os.system('sudo nc -l -p 3333 | pv -rb > ' + books[int(file_choosen)])

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    else:
        print "ERROR"


