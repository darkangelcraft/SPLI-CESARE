# coding=utf-8
import os
import glob
import re
import json
import difflib

# variabile globale che mi serve per identificare il libro scelto da cifrare
file_choosen = -1
# cosi non mi stampa anche STORY_CIPHER e STORY_CLEAR
books = glob.glob("*_.txt")

print '\nchoose:'

int_option = None
while int_option is None:

    print '0) dizionario'
    print '1) scegli file'
    print '2) cifra'
    print '3) decifra'
    print '4) invia'
    print '5) ricevi'
    print '6) attacco bruteforce'

    try:
        option1 = raw_input()
    except SyntaxError:
        option = None

    if option1 == '0':
        print '1) per lettere'
        print '2) per parole'

        opt=raw_input()

        #### LETTERE ####
        if opt == '1':

            array_books = ""

            i = 0
            # scorro tutti i libri
            while i < 6:
                file = open(books[i], "r")
                # bisogna togliere la punteggiature [".", ";", ":", "!", "?", "/", "\\", ",", "#", "@", "$", "&", ")", "(", "\""]
                story = file.read().lower().replace(".", " ").replace("'", " ").replace(";", " ").replace(":", " ").replace("!", " ").replace("?", " ").replace("/", " ").replace("'\'", " ").replace(',', " ").replace("#"," ").replace("@", " ").replace("$", " ").replace("&", " ").replace(")", " ").replace('"', " ").replace("-"," ").replace("°", " ").replace("(", " ").split()

                # faccio un merge di tutti i libri
                array_books += str(story)
                i += 1

            # creo array string con tutte le lettere di tutti i libri
            array_letters = ""

            for word in story:
                for c in word:
                    if c.isalpha():
                        array_letters += c + ' '

            # adesso dell'array_letters ne calcolo le occorrenze
            alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't','u', 'v', 'w', 'x', 'y', 'z']

            #inizializzo file json
            data=[]

            with open('dictionary_letters.txt', 'w') as outfile:
                json_data = json.dumps(data)
                outfile.write(json_data)

            with open('dictionary_letters.txt') as input_file:
              data_loaded = json.load(input_file)

            j = 0
            while j < 26:
                #print alphabet[j]
                #print array_letters.count(alphabet[j])
                #print ''
                data.append({'letter':alphabet[j],'occ': array_letters.count(alphabet[j])})
                j+=1

            ## Save our changes to JSON file
            jsonFile = open("dictionary_letters.txt", "w+")
            jsonFile.write(json.dumps(data))
            jsonFile.close()

            print "dictionary_letters created!\n\n"

        #### PAROLE #####
        elif opt == '2':

            array_without_occurence = ""

            i=0
            #scorro tutti i libri
            while i < 6:
                file = open(books[i], "r")
                # bisogna togliere la punteggiature [".", ";", ":", "!", "?", "/", "\\", ",", "#", "@", "$", "&", ")", "(", "\""]
                story = file.read().lower().replace("."," ").replace("'"," ").replace(";"," ").replace(":"," ").replace("!"," ").replace("?"," ").replace("/"," ").replace("'\'"," ").replace(','," ").replace("#"," ").replace("@"," ").replace("$"," ").replace("&"," ").replace(")"," ").replace('"'," ").replace("-"," ").replace("°"," ").replace("("," ").split()


                #aggiungo le parole non doppie
                for word in story:
                    if not array_without_occurence.__contains__(word):
                        array_without_occurence += word + '\n'

                #passo al libro sucessivo
                i+=1

            # scrivo e creo file cifrato
            file = open("dictionary_words.txt", "w")
            file.write(array_without_occurence)

            #leggo a video file appena creato
            file = open("dictionary_words.txt", "r")
            print file.read()

            print "dictionary_words created!\n\n"

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    # stampo i file da selezionare1
    elif option1 == '1':
        i = 0
        for num in books:
            print '\t' + str(i) + ') ' + books[i]
            i = i + 1

        try:
            file_choosen = raw_input()
        except SyntaxError:
            option = None

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    # CIFRATURA
    elif option1 == '2':
        print 'the book choosen is: ' + books[int(file_choosen)]

        # aggiusto prima il file eliminando maiuscole al suo interno
        file = open(books[int(file_choosen)], "r+")
        story = file.read().lower()

        print 'insert OFFSET: (+2) (-2)'
        offset = raw_input()

        story_cipher = ""

        # ora scorro carattere per carattere e applico l offset alle lettere
        for c in story:
            # restituisce True se e un carattere ABCabc
            if c.isalpha():
                # ord('a') -> 97
                # chr(97 + 3) -> chr(100) -> 'd'

                # numero corrispondente in ASCII
                character = str(c)
                # print character
                old = ord(character)
                # print int(old)
                # numero shiftato destra o sinistra
                if offset.__contains__('+'):
                    new = int(old) + int(offset[1:])
                    if new > 122:
                        new = new - 26
                else:
                    new = int(old) - int(offset[1:])
                    if new < 97:
                        new = new + 26

                story_cipher = story_cipher + chr(new)
                # print chr(new)
            else:
                character = str(c)
                story_cipher = story_cipher + character

        # print story_cipher

        # scrivo e creo file cifrato
        file = open("STORY_CIPHER.txt", "w")
        file.write(story_cipher)

        print "story_cipher created!\n\n"

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    #DECIFRATURA
    elif option1 == '3':
        print 'the book to decipher is: ' + books[int(file_choosen)]

        # aggiusto prima il file eliminando maiuscole al suo interno
        file = open("STORY_CIPHER.txt", "r+")
        story = file.read()

        print 'insert OFFSET known:'
        offset = raw_input()

        story_clear = ""

        # inizio decifrazione avendo noto l'offset
        for c in story:
            # restituisce True se e un carattere ABCabc
            if c.isalpha():
                # ord('a') -> 97
                # chr(97 + 3) -> chr(100) -> 'd'

                # numero corrispondente in ASCII
                character = str(c)
                # print character
                old = ord(character)
                # print int(old)
                # numero shiftato destra o sinistra
                if offset.__contains__('+'):
                    new = int(old) + int(offset[1:])
                    if new > 122:
                        new = new - 26
                else:
                    new = int(old) - int(offset[1:])
                    if new < 97:
                        new = new + 26

                story_clear = story_clear + chr(new)
                # print chr(new)
            else:
                character = str(c)
                story_clear = story_clear + character

        # print story_clear

        # scrivo e creo file cifrato
        file = open("STORY_CLEAR.txt", "w")
        file.write(story_clear)

        print "story_clear created!\n\n"

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    elif option1 == '4':
        print 'waiting...'
        os.system('sudo nc -l -p 3333 | pv -rb > ' + books[int(file_choosen)])

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    elif option1 == '5':
        print 'sending with netcat'
        print "insert ip target:"
        ip = raw_input()
        os.system('sudo pv ' + books[int(file_choosen)] + ' | nc -w 1 ' + ip + ' 3333')

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    elif option1 == '6':
        print 'the book to hacking is: '+books[int(file_choosen)]+'\n'

        print books[int(file_choosen)]

        # aggiusto prima il file eliminando maiuscole al suo interno
        file = open('STORY_CIPHER.txt', "r+")
        story_cipher = file.read()
        #print story

        # (inizio il bruteforce!)
        file1 = open('dictionary_words.txt', "r+")
        dictionary = file1.read().lower()

        #il bruteforce viene fatto due alla volta, ovvero per il numero 3 viene fatto sia (+3) che (-3)
        offset_bruteforce=1

        while offset_bruteforce < 27:
            story_bruteforce_positive = ""
            story_bruteforce_negative = ""

            # inizio decifrazione avendo noto l'offset
            for c in story_cipher:
                # restituisce True se e un carattere ABCabc
                if c.isalpha():
                    # ord('a') -> 97
                    # chr(97 + 3) -> chr(100) -> 'd'

                    # numero corrispondente in ASCII
                    character = str(c)
                    # print character
                    old = ord(character)
                    # print int(old)

                    # numero shiftato destra
                    new_positive = int(old) + offset_bruteforce
                    if new_positive > 122:
                        new_positive = new_positive - 26

                    # numero shiftato a sinistra
                    new_negative = int(old) - offset_bruteforce
                    if new_negative < 97:
                        new_negative = new_negative + 26

                    story_bruteforce_positive = story_bruteforce_positive + chr(new_positive)
                    story_bruteforce_negative = story_bruteforce_negative + chr(new_negative)
                    # print chr(new)

                #e un carattere lo lascio cosi
                else:
                    character = str(c)
                    story_bruteforce_positive = story_bruteforce_positive + character
                    story_bruteforce_negative = story_bruteforce_negative + character

            percent_plus = round(difflib.SequenceMatcher(None, story_bruteforce_positive, dictionary).ratio() * 10000)
            percent_minus = round(difflib.SequenceMatcher(None, story_bruteforce_negative, dictionary).ratio() * 10000)

            #stampo tutte le percentuali:
            print 'percent (+'+str(offset_bruteforce)+') ---> '+ str(percent_plus)
            print 'percent (-'+str(offset_bruteforce)+') ---> '+ str(percent_minus)
            print '\n'

            #cerco di capire la percentuale giusta
            if int(percent_plus) > 90:
                print "# FIND! #"
                print 'the offset is a (+'+str(offset_bruteforce)+')\n'

                # scrivo e creo file cifrato
                file = open("STORY_BRUTEFORCE.txt", "w")
                file.write(story_bruteforce_positive)

                offset_bruteforce=28

            elif int(percent_minus) > 90:
                print "# FIND! #"
                print 'the offset is a (-'+str(offset_bruteforce) + ')\n'

                # scrivo e creo file cifrato
                file = open("STORY_BRUTEFORCE.txt", "w")
                file.write(story_bruteforce_negative)

                offset_bruteforce=28

            offset_bruteforce+=1

        print "story_bruteforce created!\n\n"

    # o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o #

    else:
        print "ERROR"
